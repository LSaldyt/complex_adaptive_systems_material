#!/usr/bin/env python3
import os, sys
from functools import partial
from collections import defaultdict
from copy import deepcopy

import pickle
import pandas
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

ids    = list(range(61))
color     = 'red'
alpha     = 1.0
linewidth = 1.8
dense     = True

sns.set(style='whitegrid')

norm = lambda x : max(min(x, 1.0), 0.0)

interactionOpacity = 1.0
anticolors = [(0.0, 1.0, 1.0), (51/255, 51/255, 201/255), (204/255, 51/255, 255/255), (0.0, 1.0, 0.0), (1.0, 153/255, 1.0), (1.0, 204/255, 0.0), (153/255, 0.0, 153/255)]
anticolors = [c + (interactionOpacity,) for c in anticolors]

def main(args):
    alarmData = pandas.read_csv('alarm_strengths.csv')
    assert len(args) == 1, 'Usage: ./time_interactions [data.csv]'
    filename = args[0]

    interactions = defaultdict(list)
    with open(filename, 'r') as infile:
        lines = infile.read().split('\n')
        for line in lines[1:]:
            if line.strip() != '':
                b, a, _, t = list(map(lambda s : int(s.strip()), line.split(',')))
                t *= 30
                interactions[t].append((a, b))

    frames = list(range(max(interactions.keys())))

    for alarmRow in alarmData.iterrows():
        i = alarmRow[0]
        strength = alarmRow[1]
        for j in ids:
            plt.plot(frames[i:i+2], [j, j], color=(1.0, 0.0, 0.0, norm(strength[j])))
        if i == 150: break;
        print(i)
    for i in frames:
        if i in interactions:
            for j, interaction in enumerate(interactions[i]):
                source, destination = interaction
                color = anticolors[j % len(anticolors)]
                plt.plot([i,i+30], [source, destination], linestyle='--', marker='.', color=color,
                         linewidth=2.0, markersize=10,
                         dashes=(5, 5))
        if i == 150: break;

    #for i in ids:
    #    #plt.plot(frames, [i] * len(frames), marker='', color='grey', linewidth=0.6, alpha=0.5)

    time_unit_label = 'Frames (30hz)'
    
    plt.title('Temporal network interactions')
    plt.xlabel(time_unit_label)
    plt.ylim(0, 61)
    plt.ylabel('Ant ID')
    plt.savefig('network_interactions.png', dpi=300)
    plt.show()

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
